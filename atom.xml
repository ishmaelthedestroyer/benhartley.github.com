<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hartley.io]]></title>
  <link href="http://benhartley.github.com/atom.xml" rel="self"/>
  <link href="http://benhartley.github.com/"/>
  <updated>2012-05-15T17:56:00+01:00</updated>
  <id>http://benhartley.github.com/</id>
  <author>
    <name><![CDATA[Ben Hartley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handlebars, Jade and Backbone views]]></title>
    <link href="http://benhartley.github.com/blog/2012/04/25/handlebars-jade-and-backbone-views/"/>
    <updated>2012-04-25T16:47:00+01:00</updated>
    <id>http://benhartley.github.com/blog/2012/04/25/handlebars-jade-and-backbone-views</id>
    <content type="html"><![CDATA[<p>How to precompile Handlebars templates written in Jade for use in a Backbone application<!-- more --></p>

<h2>Handlebars intro</h2>

<p>If you&#8217;re using Backbone, you&#8217;re probably using a templating engine to render your views. My engine of choice at the moment is <a href="http://handlebarsjs.com/">Handlebars</a> because it combines a simple, familiar syntax with the ability to precompile templates. Precompiling our templates allows for a two-fold speed increase, since we only have to include the smaller handlebars.runtime.min.js file (~2KB) instead of the whole library (~20KB) and our templates are no longer compiled on the fly in our Backbone view. However, if you want to precompile your templates, you&#8217;re going to need some kind of build process. In steps <a href="http://coffeescript.org/#cake">Cake</a>&#8230;</p>

<h2>Coffee and Cake</h2>

<p>Cake allows you to write custom build tasks in coffeescript, so you can create a series of tasks for your common build tasks - e.g. compiling coffeescript to javascript and, of course, compiling your Handlebars templates. Here&#8217;s a simple cake task that compiles all the templates in a directory to a single js file (templates.js):</p>

<figure class='code'><figcaption><span>Precompiling Handlebars templates with Cake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">task</span> <span class="s1">&#39;handlebars:compile&#39;</span><span class="p">,</span> <span class="s1">&#39;compile Handlebars templates&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">exec</span> <span class="s1">&#39;handlebars src/html/* -f www/js/templates.js&#39;</span><span class="p">,</span> <span class="nf">(err, stdout, stderr) -&gt;</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s1">&#39;Handlebars compiled!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all we have to do is include templates.js in our app, and our compiled templates will be available at Handlebars.templates[template_name]. So, a very simple Backbone view might appear as follows:</p>

<figure class='code'><figcaption><span>Minimum-viable Backbone view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">ViewName</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">initialize : </span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">@render</span><span class="p">()</span>
</span><span class='line'>  <span class="nv">render : </span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="vi">@el.innerHTML = </span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">templates</span><span class="p">[</span><span class="s1">&#39;template.html&#39;</span><span class="p">]</span> <span class="nx">@model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is great - we&#8217;ve got an easy, and more importantly, super-fast way of rendering our Backbone views. But what if we could make it even easier?</p>

<h2>Never write HTML again</h2>

<p>Handlebars is cool, but used in it&#8217;s most simplistic way, it still means we have to write HTML, which, let&#8217;s face it, isn&#8217;t much fun. A typical Handlebars template might appear as below. (Note, in all the Handlebars examples below, I&#8217;ve used single curly braces to enclose variables, as using double braces causes problems with rendering. You should use double braces in your code.):</p>

<figure class='code'><figcaption><span>Handlebars in HTML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;our_div&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{handlebars_data}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s still a mess of angular brackets and opening / closing tags. <a href="https://github.com/visionmedia/jade">Jade</a> is a neat little language that compiles to HTML, thus rescuing us from all this. Consider this simple form:</p>

<figure class='code'><figcaption><span>Jade template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">form</span><span class="nf">#some_id</span>(<span class="na">action=</span><span class="s">&#39;&#39;</span>)
</span><span class='line'>  <span class="nt">p</span>
</span><span class='line'>      <span class="nt">label</span><span class="nc">.inline</span>(<span class="na">for=</span><span class="s">&#39;the_input&#39;</span>) Label for input
</span><span class='line'>      <span class="nt">input</span>(<span class="na">type=</span><span class="s">&#39;text&#39;</span><span class="err">,</span> <span class="na">name=</span><span class="s">&#39;the_input&#39;</span><span class="err">,</span> <span class="na">placeholder=</span><span class="s">&#39;Enter value here&#39;</span>)
</span><span class='line'>  <span class="nt">p:</span> input(type=&#39;submit&#39;, value=&#39;Submit&#39;)
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; which compiles to:</p>

<figure class='code'><figcaption><span>Compiled HTML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;some_id&quot;</span> <span class="na">action=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;inline&quot;</span> <span class="na">for=</span><span class="s">&quot;the_input&quot;</span><span class="nt">&gt;</span>Label for input<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;the_input&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter value here&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handlebars templates written in Jade</h2>

<p>Even in the small example above, there&#8217;s noticably less work involved in typing out the Jade version. In a large project, this really adds up, so if you&#8217;re not using Jade, you should be. So what if we add another step to our build process that takes a template written in Jade, compiles it to HTML, then converts that HTML into a precompiled Handlebars template? Then we can have templates that look like below:</p>

<figure class='code'><figcaption><span>Handlebars template written in Jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="nt">li</span> {some_value} /* Remember - use double curly-braces in your templates */
</span><span class='line'>  <span class="nt">li</span> {some_other_value}
</span><span class='line'>  <span class="nt">li</span> {some_value}
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; and we end up with ready-to-use HTML templates for use in our Backbone app. Again, in steps Cake, where we can chain tasks together using &#8220;invoke&#8221;.</p>

<figure class='code'><figcaption><span>Two-step build process</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">task</span> <span class="s1">&#39;jade:compile&#39;</span><span class="p">,</span> <span class="s1">&#39;compile jade templates from /src/jade to /src/html&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">exec</span> <span class="s1">&#39;jade -O src/html/ src/jade/*&#39;</span><span class="p">,</span> <span class="nf">(err, stdout, stderr) -&gt;</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s1">&#39;Jade templates compiled!&#39;</span>
</span><span class='line'>      <span class="nx">invoke</span> <span class="s1">&#39;handlebars:compile&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">task</span> <span class="s1">&#39;handlebars:compile&#39;</span><span class="p">,</span> <span class="s1">&#39;compile Handlebars templates&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">exec</span> <span class="s1">&#39;handlebars src/html/* -f www/js/templates.js&#39;</span><span class="p">,</span> <span class="nf">(err, stdout, stderr) -&gt;</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s1">&#39;Handlebars compiled!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when one task finishes successfully, the next task is called and we can have have a more complicated multi-stage build process.</p>

<h2>Summary</h2>

<p>Using Cake, we can chain together multiple build tasks to combine different tools that help speed up app development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using secure websockets (wss://) with nginx and varnish]]></title>
    <link href="http://benhartley.github.com/blog/2012/04/14/using-secure-websockets-wss-slash-slash-with-nginx-and-varnish/"/>
    <updated>2012-04-14T10:17:00+01:00</updated>
    <id>http://benhartley.github.com/blog/2012/04/14/using-secure-websockets-wss-slash-slash-with-nginx-and-varnish</id>
    <content type="html"><![CDATA[<p>How to get socket.io communicating over wss://<!-- more --></p>

<h2>Preamble</h2>

<p>The inital joy of working with socket.io and node to pass data between client and server melted away a little bit when I switched from using a regular websocket connection (ws://) to a secure one (wss://). N.B - If you&#8217;re not familiar with websockets, think of this as the difference between http:// and https://.</p>

<p>Initally, I had varnish listening on port 80, then forwarding traffic to my node server, and this was working fine until I added wss:// into the mix. Nothing was listening on 443, and varnish doesn&#8217;t know what to do with encrypted traffic anyway. I figured I could set nginx up on 443 to deal with this traffic but it turns out I was wrong&#8230;</p>

<p>Websockets work by upgrading a regular HTTP/1.0 connection to HTTP/1.1, which means a single connection between the client and server can be kept open, rather than opening a new connection for every request. This is great and all that (think <em>seriously amazing</em> in terms of what you can do with this), but it&#8217;s fairly well documented that current stable versions of nginx can&#8217;t handle HTTP/1.1 connections.</p>

<p>So basically, you need to run something else on 443 if you want to use wss://.</p>

<p>Here&#8217;s what I ended up doing, and a quickstart guide on how to do it yourself:</p>

<h2>Problem (tl;dr)</h2>

<ul>
<li>nginx doesn&#8217;t understand HTTP/1.1 (necessary for websockets to work in the first place)</li>
<li>varnish doesn&#8217;t understand encrypted traffic</li>
<li>how to get socket.io communicating over wss:// ?</li>
</ul>


<h2>Solution</h2>

<p>My solution ended up looking like this:</p>

<pre><code>(:443) --&gt; stunnel --+              +--&gt; [socket.io] --&gt; node
                     |              |                      ^
                     +--&gt; varnish --+                      |
                     |              |                      |    
(:80) ---------------+              +--&gt; [static] -----&gt; nginx
</code></pre>

<p>Unencrypted traffic comes straight through to varnish, which listens on port 80. Encrypted traffic commes through port 443 to stunnel, which then decrypts it before passing it through to the same instance of varnish. Varnish then either serves content from the cache or chooses the correct backend to respond to the request (nginx for static content or node for websockets). Nginx is configured to serve static content or pass requests through to node if necessary.</p>

<h2>Quickstart</h2>

<p>The following instructions assume you&#8217;re using Amazon Linux. Other types of linux may require further steps and use different commands.</p>

<h3>Stunnel</h3>

<p><a href="http://stunnel.org">Stunnel</a> allows you to encrypt arbitrary tcp connections inside ssl (so you&#8217;re going to need an ssl certificate). If you don&#8217;t have one, you can get a <a href="https://www.startssl.com/">free certificate here</a>. To install stunnel:</p>

<pre><code>sudo yum install stunnel
</code></pre>

<p>You then need to edit the stunnel config file, which is at /etc/stunnel/stunnel.conf:</p>

<figure class='code'><figcaption><span>/etc/stunnel/stunnel.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">cert</span> <span class="o">=</span> /path/to/your.crt
</span><span class='line'><span class="nv">key</span> <span class="o">=</span> /path/to/your.key
</span><span class='line'>
</span><span class='line'><span class="nv">debug</span> <span class="o">=</span> 5
</span><span class='line'><span class="nv">output</span> <span class="o">=</span> /var/log/stunnel/stunnel.log
</span><span class='line'>
</span><span class='line'><span class="o">[</span>https<span class="o">]</span>
</span><span class='line'><span class="nv">accept</span> <span class="o">=</span> 443
</span><span class='line'><span class="nv">connect</span> <span class="o">=</span> 80
</span><span class='line'><span class="nv">TIMEOUTclose</span> <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>Then launch stunnel:</p>

<pre><code>sudo stunnel
</code></pre>

<h3>Varnish</h3>

<p><a href="https://www.varnish-cache.org/">Varnish</a> is many things - it caches content, can act as a load balancer and generally it acts to speed things up. To install:</p>

<pre><code>sudo yum install varnish
</code></pre>

<p>I&#8217;m not going to get into <a href="https://www.varnish-cache.org/docs/3.0/tutorial/">configuring varnish</a> in too much depth here since it&#8217;s a big subject. Here is a simplified version of the relevant parts of my config file though (/etc/varnish/default.vcl):</p>

<figure class='code'><figcaption><span>/etc/varnish/default.vcl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># you can define multiple backends using the following syntax:</span>
</span><span class='line'>
</span><span class='line'>backend node <span class="o">{</span>
</span><span class='line'>  .host <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span>;
</span><span class='line'>  .port <span class="o">=</span> <span class="s2">&quot;3000&quot;</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend nginx <span class="o">{</span>
</span><span class='line'>  .host <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span>;
</span><span class='line'>  .port <span class="o">=</span> <span class="s2">&quot;81&quot;</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># incoming traffic gets dealt with inside the following block</span>
</span><span class='line'>
</span><span class='line'>sub vcl_recv <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># choose backend based on request</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.url ~ <span class="s2">&quot;\.(js|css|jpg|png)$&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">set </span>req.backend <span class="o">=</span> nginx;
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">set </span>req.backend <span class="o">=</span> node;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># pipe websocket connections directly to node app</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span>req.http.upgrade ~ <span class="s2">&quot;(?i)websocket&quot;</span> <span class="o">||</span> req.url ~ <span class="s2">&quot;^/socket.io/&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">(</span>pipe<span class="o">)</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># outgoing traffic gets dealt with below</span>
</span><span class='line'>
</span><span class='line'>sub vcl_pipe <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># copy the upgrade header so websocket connections get upgraded to 1.1</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.http.upgrade<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">set </span>bereq.http.upgrade <span class="o">=</span> req.http.upgrade;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span>pipe<span class="o">)</span>;
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To start varnish listening on port 80, use the following (you can set the cache size by changing 1G to your own value):</p>

<pre><code>sudo varnishd -f /etc/varnish/default.vcl -s malloc,1G -T 127.0.0.1:2000
</code></pre>

<p>To stop varnish, use the following</p>

<pre><code>sudo pkill varnishd
</code></pre>

<h3>Nginx</h3>

<p><a href="http://nginx.org/">Nginx</a> is a lightweight, super-fast web server. The dev version already has support for HTTP/1.1, but the current stable version does not. Hence this article&#8230; To install:</p>

<pre><code>sudo yum install nginx
</code></pre>

<p>Varnish is set up to pass requests for uncached static files through to nginx (listening on port 81) so it can serve them directly (it&#8217;s insanely fast at doing this), but there are times when it may not be able to handle a request it is passed. For these requests, you can set your node app up to be an upstream server, so for anything nginx can&#8217;t handle, it can just pass through to node. You can configure this in /etc/nginx/conf.d/default.conf:</p>

<figure class='code'><figcaption><span>/etc/nginx/conf.d/default.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">3000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">listen</span> <span class="s">*:81</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server_name</span> <span class="s">example.com</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">root</span> <span class="s">/srv/www/example.com</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">error_log</span> <span class="s">/var/log/nginx/example.com/error.log</span> <span class="s">info</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">access_log</span> <span class="s">/var/log/nginx/example.com/access.log</span> <span class="s">main</span><span class="p">;</span>
</span><span class='line'>                                                      
</span><span class='line'>  <span class="kn">location</span> <span class="p">=</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">proxy_pass</span> <span class="s">http://node</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>                                                                                      
</span><span class='line'>  <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="s">@proxy</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>              
</span><span class='line'>  <span class="kn">location</span> <span class="s">@proxy</span><span class="p">{</span>
</span><span class='line'>      <span class="kn">proxy_pass</span> <span class="s">http://node</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then start nginx using:</p>

<pre><code>sudo /etc/init.d/nginx start
</code></pre>

<p>&#8230; and check it&#8217;s running on the correct port using:</p>

<pre><code>sudo netstat -anp | grep nginx
</code></pre>

<h2>Summary</h2>

<p>This set up is working for me now and seems to be serving both secure and non-secure traffic pretty quickly. Hopefully the next version of nginx with support for HTTP/1.1 isn&#8217;t too far off.</p>
]]></content>
  </entry>
  
</feed>
