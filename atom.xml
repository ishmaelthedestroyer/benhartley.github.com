<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hartley.io]]></title>
  <link href="http://benhartley.github.com/atom.xml" rel="self"/>
  <link href="http://benhartley.github.com/"/>
  <updated>2013-02-11T15:19:40+00:00</updated>
  <id>http://benhartley.github.com/</id>
  <author>
    <name><![CDATA[Ben Hartley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web apps as first-class citizens in OS X: Fluid + Slate + Choosy]]></title>
    <link href="http://benhartley.github.com/blog/2013/02/11/web-apps-as-first-class-citizens-in-os-x-fluid-slate-choosy/"/>
    <updated>2013-02-11T06:47:00+00:00</updated>
    <id>http://benhartley.github.com/blog/2013/02/11/web-apps-as-first-class-citizens-in-os-x-fluid-slate-choosy</id>
    <content type="html"><![CDATA[<p>Promote the web apps you regularly use to first-class citizens in OS X using 3 simple utilities.<!-- more --></p>

<h2>Fluid</h2>

<p><a href="http://fluidapp.com/">Fluid</a> is a free app that lets you create a &#8220;native&#8221; version of a webapp - it&#8217;s essentially a stand-alone version of webkit for each web app which can then have its own Dock icon etc. If you aren&#8217;t already using it, I&#8217;ll leave you to experiment with it here.</p>

<h2>Slate</h2>

<p><a href="https://github.com/jigish/slate">Slate</a> is an insanely fully-featured window manager, and I encourage you to dive into it since it has way more features than anyone could ever need. The functionality we&#8217;re interested in for this post is assigning hotkeys to apps that are running, so your Fluid apps are only ever a couple of keystrokes away. No more alt-tabbing between them! Here&#8217;s a snippet from my <code>~/.slate</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias hotkey ctrl;cmd
</span><span class='line'>bind b:${hotkey} focus 'Google Chrome'
</span><span class='line'>bind i:${hotkey} focus 'iTerm'
</span><span class='line'>bind m:${hotkey} focus 'Mail'
</span><span class='line'>bind c:${hotkey} focus 'gCal'
</span><span class='line'>bind f:${hotkey} focus 'Finder'
</span><span class='line'>bind r:${hotkey} focus 'RTM'
</span><span class='line'>bind t:${hotkey} focus 'iTunes'
</span><span class='line'>bind d:${hotkey} focus 'Google Drive'
</span><span class='line'>bind w:${hotkey} focus 'Workflowy'</span></code></pre></td></tr></table></div></figure>


<p><em>You can have a look through the rest of the file in my <a href="https://github.com/benhartley/dotfiles">.dotfiles repo</a></em></p>

<p>These config options specify a hotkey combination of <code>cmd</code> + <code>ctrl</code> and then assign different keys to different apps, e.g. <code>cmd</code> + <code>crtl</code> + <code>c</code> switches to Google Calendar.</p>

<h2>Choosy</h2>

<p>The final piece in this puzzle is <a href="http://www.choosyosx.com/">Choosy</a> - self-described as &#8220;a smarter default browser for OS X&#8221;. Choosy acts as a router for any links you click, anywhere in the OS. Instead of them opening automatically in your default browser, Choosy lets you set rules, and open different &#8220;browsers&#8221; (or Fluid apps) depending on where the link points to. So if someone emails me a link to a story in Pivotal and I click that link, Choosy matches the URL to my Pivotal Fluid app and launches that instead of Chrome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search the web from Vim]]></title>
    <link href="http://benhartley.github.com/blog/2012/07/21/search-the-web-from-vim/"/>
    <updated>2012-07-21T11:12:00+01:00</updated>
    <id>http://benhartley.github.com/blog/2012/07/21/search-the-web-from-vim</id>
    <content type="html"><![CDATA[<p>Seamless web search - lose less focus<!-- more --></p>

<h2>Laziness, Impatience&#8230;</h2>

<p>90% of the time I switch context away from Vim, it&#8217;s to load Chrome to search for something. In order to make this as seamless as possible, I&#8217;ve added a function to my .vimrc which brings up a prompt where I can enter my search terms, hit enter and it launches Chrome and searches the search engine of my choice with the entered text.</p>

<p>I should note - this is for Chrome on OS X, however, it could be adapted to work on other platforms and with other browsers.</p>

<figure class='code'><figcaption><span>Key mapping for search prompt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> Terms<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> inputsave<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> searchterm <span class="p">=</span> input<span class="p">(</span><span class="s1">&#39;Search: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> inputrestore<span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> searchterm
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>map Â© <span class="p">&lt;</span>ESC<span class="p">&gt;</span>:<span class="p">!</span> <span class="sr">/usr/</span><span class="nb">bin</span><span class="sr">/open -a &quot;/</span>Applications<span class="sr">/Google Chrome.app&quot; &#39;https://google.com/</span>search?<span class="k">q</span><span class="p">=&lt;</span>C<span class="p">-</span>R<span class="p">&gt;=</span>Terms<span class="p">()&lt;</span>CR<span class="p">&gt;</span>&#39;<span class="p">&lt;</span>CR<span class="p">&gt;&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code maps <code>alt + g</code> to bring up the prompt, hitting enter then launches a Google search in Chrome. You needn&#8217;t restrict yourself to just searching Google either - for <a href="https://duckduckgo.com/">DuckDuckGo</a> you can replace <code>https://google.com/search?q=</code> with <code>https://duckduckgo.com/?q=</code> or for <a href="https://blekko.com/">Blekko</a> you can use <code>https://blekko.com/ws/</code>.</p>

<p>You can check out <a href="https://github.com/benhartley/dotfiles/blob/master/vimrc">my full .vimrc</a> on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spinning wheel with segments using Stylus and Nib (CSS3)]]></title>
    <link href="http://benhartley.github.com/blog/2012/07/14/spinning-wheel-with-segments-using-css3/"/>
    <updated>2012-07-14T12:16:00+01:00</updated>
    <id>http://benhartley.github.com/blog/2012/07/14/spinning-wheel-with-segments-using-css3</id>
    <content type="html"><![CDATA[<p>Use CSS3 transitions and a clever CSS hack to create a spinning wheel made up of individual segments<!-- more --></p>

<h2>Demo (<a href="https://github.com/benhartley/wheel-demo">view source on GitHub</a>)</h2>

<p>Quick and dirty iframe:</p>

<iframe style="width:728px; height:470px;" src="http://d2uqigvzon6qhz.cloudfront.net/"></iframe>


<h2>Intro</h2>

<p>I&#8217;ve been working on a fun project for Monotype this week to demonstrate their <a href="http://webfonts.fonts.com">Web Fonts</a> service, using CSS3 to create a spinning wheel. It&#8217;s not quite finished, so excuse any glaring bugs, but I thought I&#8217;d share how it&#8217;s made. The whole project only uses a handful of images, the segments of the wheel are individual divs, the text is all live-text. I could have used even fewer images if I&#8217;d had more time on it, but I digress&#8230; This write-up glosses-over a lot of the detail, so if you really want to know how it works, you&#8217;re best off looking through the source code, however, hopefully you&#8217;ll find both helpful.</p>

<h2>Power of Stylus</h2>

<p>This project was made infinitely easier by using <a href="http://learnboost.github.com/stylus/">Stylus</a> and <a href="http://visionmedia.github.com/nib/">Nib</a> to create the CSS. Stylus is a simple language that compiles to CSS (similar to SASS or Less), and Nib is a library for Stylus that enables you to write way less code. You can view the whole <code>.styl</code> file in the <a href="https://github.com/benhartley/wheel-demo">GitHub repo</a>, and I&#8217;ll be using simplified excerpts here too. Unfortunately, Pygments doesn&#8217;t seem to have Stylus syntax highlighting, so I&#8217;ve used Ruby, thus the code snippets may have some weird highlighting&#8230;</p>

<p>At the top of <code>/src/styl/style.styl</code>, there are two lines:</p>

<figure class='code'><figcaption><span>Stylus setup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@import</span> <span class="n">nib</span>
</span><span class='line'><span class="n">global</span><span class="o">-</span><span class="n">reset</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first one means Nib will be used when compiling our CSS - more on that later. The second means Eric Meyer&#8217;s global browser reset CSS rules will be automatically added to our compiled CSS file. How easy is that?</p>

<h2>The Triangles</h2>

<p>On to the CSS hack I mentioned earlier. This came to my attention via <a href="http://jonrohan.me/guide/css/creating-triangles-in-css/">Jon Rohan</a>, and looks like it was created originally by, him again, Eric Meyer. For our purposes, the triangles are created as follows:</p>

<figure class='code'><figcaption><span>Triangular divs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">triangle</span>
</span><span class='line'>    <span class="n">border</span><span class="o">-</span><span class="n">style</span> <span class="n">solid</span>
</span><span class='line'>    <span class="n">border</span><span class="o">-</span><span class="n">width</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">250</span><span class="n">px</span> <span class="mi">800</span><span class="n">px</span>
</span><span class='line'>    <span class="n">border</span><span class="o">-</span><span class="n">color</span> <span class="n">transparent</span>
</span><span class='line'>    <span class="n">width</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">height</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we then need to do is add a colour to the bottom-border and we have a triangle (this example has been scaled down):</p>

<div style="border-style:solid;border-width:0 0 125px 400px;border-color:transparent;border-bottom-color:#291f33;width:0;height:0;margin-bottom:30px;"></div>


<p>Now, all we need to do is create several of these triangles and rotate them and we have&#8230;</p>

<h2>The Wheel</h2>

<p>The <code>#wheel</code> in my project is made up of 20 <code>.segment</code> divs, but you can use as many as you like. Rather than having to calculate the rotation for each segment, we can use a function in Stylus to do the job for us. As there are 20 segments (numbered 0 to 19), the rotation for each segment will be its number multiplied by 18 (18 = 360Âº divided by 20 segments).</p>

<figure class='code'><figcaption><span>Rotating the segments</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">num_segs</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">rotation</span> <span class="o">=</span> <span class="mi">360</span> <span class="o">/</span> <span class="n">num_segs</span>
</span><span class='line'><span class="n">rotate_seg</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>
</span><span class='line'>    <span class="n">segment</span> <span class="o">*</span> <span class="n">rotation</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have the <code>rotate_seg</code> function, we can loop through our segment numbers, pass them to the function and it will return how much we need to rotate that segment to make the wheel. Note 1: Nib enables us to just use <code>transform</code> - no vendor prefixes in sight! Note 2: the line beginning <code>#seg</code> is not a comment - the syntax highlighter thinks it is though&#8230;</p>

<figure class='code'><figcaption><span>Loop through segments and apply rotation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">19</span>
</span><span class='line'>    <span class="c1">#seg_{num}</span>
</span><span class='line'>        <span class="n">transform</span> <span class="n">rotate</span><span class="p">(</span><span class="n">rotate_seg</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we now set <code>transform-origin</code> to <code>bottom left</code>, then our segments will fan out into a circle.</p>

<p>While we&#8217;re looping through the segments, we can also use a function to apply a colour to each one of our triangular divs. In my project, the colours were part of the design, so I used a hash that mapped a colour to a segment number. However, with Stylus you could also apply one of the many colour functions to create a cool effect.</p>

<figure class='code'><figcaption><span>Apply a colour to each segment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="c1">#fcf0e0) (1 #fc6d58) (2 #3f9149) (3 #5cd0e0) (4 #fcd925) (5 #03b845) (6 #8f0f80) (7 #fc35aa) (8 #b5f032) (9 #fc6d58) (10 #1cd9a6) (11 #def01f) (12 #fca932) (13 #3f659a) (14 #e2d62c) (15 #ea1c53) (16 #5cd0e0) (17 #fca932) (18 #1cd9a6) (19 #c3d49e)</span>
</span><span class='line'>
</span><span class='line'><span class="n">segment_color</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">color</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="k">if</span> <span class="n">color</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">segment</span> <span class="k">for</span> <span class="n">color</span> <span class="k">in</span> <span class="n">colors</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">19</span>
</span><span class='line'>    <span class="o">.</span><span class="n">triangle</span>
</span><span class='line'>        <span class="n">border</span><span class="o">-</span><span class="n">bottom</span><span class="o">-</span><span class="n">color</span> <span class="n">segment_color</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Make it Spin</h2>

<p>So, now we have a wheel made up of individual segments. But surely the coolest thing is that we can make it spin, and add a custom easing effect to make the spin feel more natural. Given the odd construction of our wheel, it took a bit of fiddling around to find the centre-point for the rotation. You may want to tweak these numbers if you change any features o the wheel. Again, <code>#wheel</code> here is not a comment but a CSS declaration.</p>

<figure class='code'><figcaption><span>Finding the centre + setting rotation speed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#wheel</span>
</span><span class='line'>    <span class="n">transform</span><span class="o">-</span><span class="n">origin</span> <span class="mi">0</span><span class="o">%</span> <span class="mi">17</span><span class="o">%</span>
</span><span class='line'>    <span class="n">transition</span> <span class="n">all</span> <span class="mi">5</span><span class="n">s</span> <span class="n">cubic</span><span class="o">-</span><span class="n">bezier</span><span class="p">(</span><span class="o">.</span><span class="mi">16</span><span class="p">,</span><span class="o">.</span><span class="mi">63</span><span class="p">,</span><span class="o">.</span><span class="mi">4</span><span class="p">,</span><span class="o">.</span><span class="mi">99</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the cubic-bezier curve defined in the easing function of the transition. Read from left to right, the transition declaration says: for all changes to the <code>#wheel</code> div, make them last 5 seconds, and use the following curve for easing. The curve starts off almost vertical, then slows sharply to create the effect of a wheel spinning, then gradually slowing down. I use cubic-bezier.com to create curves for easing functions, and you can <a href="http://cubic-bezier.com/#.16,.63,.4,.99">view this particular curve here</a>.</p>

<p>Now, when we change the rotation of the wheel, it will spin for five seconds, and then gracefully slow down to the desired position. We change the rotation by adding one of several classes to <code>#wheel</code> and we generate those classes using Stylus:</p>

<figure class='code'><figcaption><span>Rotation classes for the wheel</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rotate_wheel</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">even</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span>
</span><span class='line'>        <span class="n">rotate_seg</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span> <span class="o">-</span> <span class="mi">181</span><span class="n">deg</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">rotate_seg</span><span class="p">(</span><span class="n">segment</span><span class="p">)</span> <span class="o">+</span> <span class="mi">179</span><span class="n">deg</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">19</span>
</span><span class='line'>    <span class="o">&amp;.</span><span class="n">show_</span><span class="p">{</span><span class="n">num</span><span class="p">}</span>
</span><span class='line'>        <span class="n">transform</span> <span class="n">rotate</span><span class="p">(</span><span class="n">rotate_wheel</span><span class="p">(</span><span class="mi">20</span> <span class="o">-</span> <span class="n">num</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, to show segment 9 for example, we just have to add <code>.show_9</code> to the <code>#wheel</code> div. The <code>rotate_wheel</code> function alternates between clockwise and anti-clockwise rotations for even and odd segments to avoid less interesting transitions (e.g. spinning from segment 4 to 5 includes a whole spin, rather than moving a single place).</p>

<h2>Summary</h2>

<p>Stylus and Nib really came into their own for me during this project. It would have been fairly boring and laborious creating the wheel using regular CSS, but as you can see above, it didn&#8217;t take much code at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handlebars, Jade and Backbone views]]></title>
    <link href="http://benhartley.github.com/blog/2012/04/25/handlebars-jade-and-backbone-views/"/>
    <updated>2012-04-25T16:47:00+01:00</updated>
    <id>http://benhartley.github.com/blog/2012/04/25/handlebars-jade-and-backbone-views</id>
    <content type="html"><![CDATA[<p>How to precompile Handlebars templates written in Jade for use in a Backbone application<!-- more --></p>

<h2>Handlebars intro</h2>

<p>If you&#8217;re using Backbone, you&#8217;re probably using a templating engine to render your views. My engine of choice at the moment is <a href="http://handlebarsjs.com/">Handlebars</a> because it combines a simple, familiar syntax with the ability to precompile templates. Precompiling our templates allows for a two-fold speed increase, since we only have to include the smaller handlebars.runtime.min.js file (~2KB) instead of the whole library (~20KB) and our templates are no longer compiled on the fly in our Backbone view. However, if you want to precompile your templates, you&#8217;re going to need some kind of build process. In steps <a href="http://coffeescript.org/#cake">Cake</a>&#8230;</p>

<h2>Coffee and Cake</h2>

<p>Cake allows you to write custom build tasks in coffeescript, so you can create a series of tasks for your common build tasks - e.g. compiling coffeescript to javascript and, of course, compiling your Handlebars templates. Here&#8217;s a simple cake task that compiles all the templates in a directory to a single js file (templates.js):</p>

<figure class='code'><figcaption><span>Precompiling Handlebars templates with Cake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">task</span> <span class="s1">&#39;handlebars:compile&#39;</span><span class="p">,</span> <span class="s1">&#39;compile Handlebars templates&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">exec</span> <span class="s1">&#39;handlebars src/html/* -f www/js/templates.js&#39;</span><span class="p">,</span> <span class="nf">(err, stdout, stderr) -&gt;</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s1">&#39;Handlebars compiled!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all we have to do is include templates.js in our app, and our compiled templates will be available at Handlebars.templates[template_name]. So, a very simple Backbone view might appear as follows:</p>

<figure class='code'><figcaption><span>Minimum-viable Backbone view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">ViewName</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">initialize : </span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">@render</span><span class="p">()</span>
</span><span class='line'>  <span class="nv">render : </span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="vi">@el.innerHTML = </span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">templates</span><span class="p">[</span><span class="s1">&#39;template.html&#39;</span><span class="p">]</span> <span class="nx">@model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is great - we&#8217;ve got an easy, and more importantly, super-fast way of rendering our Backbone views. But what if we could make it even easier?</p>

<h2>Never write HTML again</h2>

<p>Handlebars is cool, but used in it&#8217;s most simplistic way, it still means we have to write HTML, which, let&#8217;s face it, isn&#8217;t much fun. A typical Handlebars template might appear as below. (Note, in all the Handlebars examples below, I&#8217;ve used single curly braces to enclose variables, as using double braces causes problems with rendering. You should use double braces in your code.):</p>

<figure class='code'><figcaption><span>Handlebars in HTML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;our_div&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{handlebars_data}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s still a mess of angular brackets and opening / closing tags. <a href="https://github.com/visionmedia/jade">Jade</a> is a neat little language that compiles to HTML, thus rescuing us from all this. Consider this simple form:</p>

<figure class='code'><figcaption><span>Jade template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">form</span><span class="nf">#some_id</span>(<span class="na">action=</span><span class="s">&#39;&#39;</span>)
</span><span class='line'>  <span class="nt">p</span>
</span><span class='line'>      <span class="nt">label</span><span class="nc">.inline</span>(<span class="na">for=</span><span class="s">&#39;the_input&#39;</span>) Label for input
</span><span class='line'>      <span class="nt">input</span>(<span class="na">type=</span><span class="s">&#39;text&#39;</span><span class="err">,</span> <span class="na">name=</span><span class="s">&#39;the_input&#39;</span><span class="err">,</span> <span class="na">placeholder=</span><span class="s">&#39;Enter value here&#39;</span>)
</span><span class='line'>  <span class="nt">p:</span> input(type=&#39;submit&#39;, value=&#39;Submit&#39;)
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; which compiles to:</p>

<figure class='code'><figcaption><span>Compiled HTML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;some_id&quot;</span> <span class="na">action=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;inline&quot;</span> <span class="na">for=</span><span class="s">&quot;the_input&quot;</span><span class="nt">&gt;</span>Label for input<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;the_input&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter value here&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handlebars templates written in Jade</h2>

<p>Even in the small example above, there&#8217;s noticably less work involved in typing out the Jade version. In a large project, this really adds up, so if you&#8217;re not using Jade, you should be. So what if we add another step to our build process that takes a template written in Jade, compiles it to HTML, then converts that HTML into a precompiled Handlebars template? Then we can have templates that look like below:</p>

<figure class='code'><figcaption><span>Handlebars template written in Jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="nt">li</span> {some_value} /* Remember - use double curly-braces in your templates */
</span><span class='line'>  <span class="nt">li</span> {some_other_value}
</span><span class='line'>  <span class="nt">li</span> {some_value}
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; and we end up with ready-to-use HTML templates for use in our Backbone app. Again, in steps Cake, where we can chain tasks together using &#8220;invoke&#8221;.</p>

<figure class='code'><figcaption><span>Two-step build process</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">task</span> <span class="s1">&#39;jade:compile&#39;</span><span class="p">,</span> <span class="s1">&#39;compile jade templates from /src/jade to /src/html&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">exec</span> <span class="s1">&#39;jade -O src/html/ src/jade/*&#39;</span><span class="p">,</span> <span class="nf">(err, stdout, stderr) -&gt;</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s1">&#39;Jade templates compiled!&#39;</span>
</span><span class='line'>      <span class="nx">invoke</span> <span class="s1">&#39;handlebars:compile&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">task</span> <span class="s1">&#39;handlebars:compile&#39;</span><span class="p">,</span> <span class="s1">&#39;compile Handlebars templates&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">exec</span> <span class="s1">&#39;handlebars src/html/* -f www/js/templates.js&#39;</span><span class="p">,</span> <span class="nf">(err, stdout, stderr) -&gt;</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s1">&#39;Handlebars compiled!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when one task finishes successfully, the next task is called and we can have have a more complicated multi-stage build process.</p>

<h2>Summary</h2>

<p>Using Cake, we can chain together multiple build tasks to combine different tools that help speed up app development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using secure websockets (wss://) with nginx and varnish]]></title>
    <link href="http://benhartley.github.com/blog/2012/04/14/using-secure-websockets-wss-slash-slash-with-nginx-and-varnish/"/>
    <updated>2012-04-14T10:17:00+01:00</updated>
    <id>http://benhartley.github.com/blog/2012/04/14/using-secure-websockets-wss-slash-slash-with-nginx-and-varnish</id>
    <content type="html"><![CDATA[<p>How to get socket.io communicating over wss://<!-- more --></p>

<h2>Preamble</h2>

<p>The inital joy of working with socket.io and node to pass data between client and server melted away a little bit when I switched from using a regular websocket connection (ws://) to a secure one (wss://). N.B - If you&#8217;re not familiar with websockets, think of this as the difference between http:// and https://.</p>

<p>Initally, I had varnish listening on port 80, then forwarding traffic to my node server, and this was working fine until I added wss:// into the mix. Nothing was listening on 443, and varnish doesn&#8217;t know what to do with encrypted traffic anyway. I figured I could set nginx up on 443 to deal with this traffic but it turns out I was wrong&#8230;</p>

<p>Websockets work by upgrading a regular HTTP/1.0 connection to HTTP/1.1, which means a single connection between the client and server can be kept open, rather than opening a new connection for every request. This is great and all that (think <em>seriously amazing</em> in terms of what you can do with this), but it&#8217;s fairly well documented that current stable versions of nginx can&#8217;t handle HTTP/1.1 connections.</p>

<p>So basically, you need to run something else on 443 if you want to use wss://.</p>

<p>Here&#8217;s what I ended up doing, and a quickstart guide on how to do it yourself:</p>

<h2>Problem (tl;dr)</h2>

<ul>
<li>nginx doesn&#8217;t understand HTTP/1.1 (necessary for websockets to work in the first place)</li>
<li>varnish doesn&#8217;t understand encrypted traffic</li>
<li>how to get socket.io communicating over wss:// ?</li>
</ul>


<h2>Solution</h2>

<p>My solution ended up looking like this:</p>

<pre><code>(:443) --&gt; stunnel --+              +--&gt; [socket.io] --&gt; node
                     |              |                      ^
                     +--&gt; varnish --+                      |
                     |              |                      |    
(:80) ---------------+              +--&gt; [static] -----&gt; nginx
</code></pre>

<p>Unencrypted traffic comes straight through to varnish, which listens on port 80. Encrypted traffic commes through port 443 to stunnel, which then decrypts it before passing it through to the same instance of varnish. Varnish then either serves content from the cache or chooses the correct backend to respond to the request (nginx for static content or node for websockets). Nginx is configured to serve static content or pass requests through to node if necessary.</p>

<h2>Quickstart</h2>

<p>The following instructions assume you&#8217;re using Amazon Linux. Other types of linux may require further steps and use different commands.</p>

<h3>Stunnel</h3>

<p><a href="http://stunnel.org">Stunnel</a> allows you to encrypt arbitrary tcp connections inside ssl (so you&#8217;re going to need an ssl certificate). If you don&#8217;t have one, you can get a <a href="https://www.startssl.com/">free certificate here</a>. To install stunnel:</p>

<pre><code>sudo yum install stunnel
</code></pre>

<p>You then need to edit the stunnel config file, which is at /etc/stunnel/stunnel.conf:</p>

<figure class='code'><figcaption><span>/etc/stunnel/stunnel.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">cert</span> <span class="o">=</span> /path/to/your.crt
</span><span class='line'><span class="nv">key</span> <span class="o">=</span> /path/to/your.key
</span><span class='line'>
</span><span class='line'><span class="nv">debug</span> <span class="o">=</span> 5
</span><span class='line'><span class="nv">output</span> <span class="o">=</span> /var/log/stunnel/stunnel.log
</span><span class='line'>
</span><span class='line'><span class="o">[</span>https<span class="o">]</span>
</span><span class='line'><span class="nv">accept</span> <span class="o">=</span> 443
</span><span class='line'><span class="nv">connect</span> <span class="o">=</span> 80
</span><span class='line'><span class="nv">TIMEOUTclose</span> <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>Then launch stunnel:</p>

<pre><code>sudo stunnel
</code></pre>

<h3>Varnish</h3>

<p><a href="https://www.varnish-cache.org/">Varnish</a> is many things - it caches content, can act as a load balancer and generally it acts to speed things up. To install:</p>

<pre><code>sudo yum install varnish
</code></pre>

<p>I&#8217;m not going to get into <a href="https://www.varnish-cache.org/docs/3.0/tutorial/">configuring varnish</a> in too much depth here since it&#8217;s a big subject. Here is a simplified version of the relevant parts of my config file though (/etc/varnish/default.vcl):</p>

<figure class='code'><figcaption><span>/etc/varnish/default.vcl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># you can define multiple backends using the following syntax:</span>
</span><span class='line'>
</span><span class='line'>backend node <span class="o">{</span>
</span><span class='line'>  .host <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span>;
</span><span class='line'>  .port <span class="o">=</span> <span class="s2">&quot;3000&quot;</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>backend nginx <span class="o">{</span>
</span><span class='line'>  .host <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span>;
</span><span class='line'>  .port <span class="o">=</span> <span class="s2">&quot;81&quot;</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># incoming traffic gets dealt with inside the following block</span>
</span><span class='line'>
</span><span class='line'>sub vcl_recv <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># choose backend based on request</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.url ~ <span class="s2">&quot;\.(js|css|jpg|png)$&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">set </span>req.backend <span class="o">=</span> nginx;
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">set </span>req.backend <span class="o">=</span> node;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># pipe websocket connections directly to node app</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span>req.http.upgrade ~ <span class="s2">&quot;(?i)websocket&quot;</span> <span class="o">||</span> req.url ~ <span class="s2">&quot;^/socket.io/&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">(</span>pipe<span class="o">)</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># outgoing traffic gets dealt with below</span>
</span><span class='line'>
</span><span class='line'>sub vcl_pipe <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># copy the upgrade header so websocket connections get upgraded to 1.1</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>req.http.upgrade<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">set </span>bereq.http.upgrade <span class="o">=</span> req.http.upgrade;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span>pipe<span class="o">)</span>;
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To start varnish listening on port 80, use the following (you can set the cache size by changing 1G to your own value):</p>

<pre><code>sudo varnishd -f /etc/varnish/default.vcl -s malloc,1G -T 127.0.0.1:2000
</code></pre>

<p>To stop varnish, use the following</p>

<pre><code>sudo pkill varnishd
</code></pre>

<h3>Nginx</h3>

<p><a href="http://nginx.org/">Nginx</a> is a lightweight, super-fast web server. The dev version already has support for HTTP/1.1, but the current stable version does not. Hence this article&#8230; To install:</p>

<pre><code>sudo yum install nginx
</code></pre>

<p>Varnish is set up to pass requests for uncached static files through to nginx (listening on port 81) so it can serve them directly (it&#8217;s insanely fast at doing this), but there are times when it may not be able to handle a request it is passed. For these requests, you can set your node app up to be an upstream server, so for anything nginx can&#8217;t handle, it can just pass through to node. You can configure this in /etc/nginx/conf.d/default.conf:</p>

<figure class='code'><figcaption><span>/etc/nginx/conf.d/default.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">3000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">listen</span> <span class="s">*:81</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server_name</span> <span class="s">example.com</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">root</span> <span class="s">/srv/www/example.com</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">error_log</span> <span class="s">/var/log/nginx/example.com/error.log</span> <span class="s">info</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">access_log</span> <span class="s">/var/log/nginx/example.com/access.log</span> <span class="s">main</span><span class="p">;</span>
</span><span class='line'>                                                      
</span><span class='line'>  <span class="kn">location</span> <span class="p">=</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">proxy_pass</span> <span class="s">http://node</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>                                                                                      
</span><span class='line'>  <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="s">@proxy</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>              
</span><span class='line'>  <span class="kn">location</span> <span class="s">@proxy</span><span class="p">{</span>
</span><span class='line'>      <span class="kn">proxy_pass</span> <span class="s">http://node</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then start nginx using:</p>

<pre><code>sudo /etc/init.d/nginx start
</code></pre>

<p>&#8230; and check it&#8217;s running on the correct port using:</p>

<pre><code>sudo netstat -anp | grep nginx
</code></pre>

<h2>Summary</h2>

<p>This set up is working for me now and seems to be serving both secure and non-secure traffic pretty quickly. Hopefully the next version of nginx with support for HTTP/1.1 isn&#8217;t too far off.</p>
]]></content>
  </entry>
  
</feed>
